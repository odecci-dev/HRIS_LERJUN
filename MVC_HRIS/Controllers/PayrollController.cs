
using MVC_HRIS.Models;
using CMS.Models;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.Net.Http.Headers;
using System.Data;
using X.PagedList;
using X.PagedList.Mvc.Core;
using Microsoft.AspNetCore.Authorization;
using Microsoft.Extensions.Options;
using MVC_HRIS.Services;
using System.Text;
using System;
using AuthSystem.Manager;
using MVC_HRIS.Manager;
using ExcelDataReader;
using System.Collections.Generic;
using OfficeOpenXml.Style;
using OfficeOpenXml;
using System.ComponentModel;
using System.Drawing;
using Net.SourceForge.Koogra.Excel2007.OX;
using MVC_HRIS.Models;
using MVC_HRIS.Services;
using API_HRIS.Models;
using API_HRIS.Manager;
using System.Net;
using ClosedXML.Excel;
using System.Runtime.Intrinsics.X86;
using System.Net.Mail;
using OfficeOpenXml.FormulaParsing.Excel.Functions.Numeric;
using crypto;
using DocumentFormat.OpenXml.Spreadsheet;

namespace MVC_HRIS.Controllers
{
    public class PayrollController : Controller
    {
        string status = "";
        private readonly QueryValueService token;
        private readonly AppSettings _appSettings;
        private ApiGlobalModel _global = new ApiGlobalModel();
        DbManager db = new DbManager();
        public readonly QueryValueService token_;
        private IConfiguration _configuration;
        private string apiUrl = "http://";
        public PayrollController(IOptions<AppSettings> appSettings,  QueryValueService _token,
                  IHttpContextAccessor contextAccessor,
                  IConfiguration configuration)
        {
            token_ = _token;
            _configuration = configuration;
            apiUrl = _configuration.GetValue<string>("AppSettings:WebApiURL");
            _appSettings = appSettings.Value;
        }

        public IActionResult Index()
        {
            //string  token = HttpContext.Session.GetString("Bearer");
            //if (token == null)
            //{
            //    return RedirectToAction("Index", "LogIn");
            //}
            return View();
        }

        public IActionResult Payroll()
        {
            return View("_Payroll");
        }
        public async Task<IActionResult> PayslipAdmin(RequestParamenter data, int page = 1, int pageSize = 5)
        {
            // Retrieve data and map it correctly
            var payslipData = await GetPayslipAdmin(data);

            var result = payslipData
                .Select(p => new TblPayslipVM
                {
                    Id = p.Id,
                    EmployeeNumber = p.EmployeeNumber,
                    UserId = p.UserId,
                    EmployeeName = p.EmployeeName,
                    GrossPay = p.GrossPay,
                    NetPay = p.NetPay,
                    Tax = p.Tax,
                    SSS = p.SSS,
                    PhilHealth = p.PhilHealth,
                    PagIbig = p.PagIbig,
                    PayDate = p.PayDate,
                    TotalDeductions = p.TotalDeductions,
                    RenderedHours = p.RenderedHours,
                    OvertimePay=p.OvertimePay,
                    OvertimeHours=p.OvertimeHours
                })
                .OrderByDescending(p => p.PayDate)
                .ToList();

            var totalCount = payslipData.Count;

            // Assign result to StaticPagedList correctly
            var viewModel = new PayslipViewModel
            {
                Payslips = new StaticPagedList<TblPayslipVM>(
                    result, page, pageSize, totalCount)
            };

            // Return the partial view with data
            return PartialView("_PayslipAdmin", viewModel);
        }
        public async Task<IActionResult> ExportToExcel(RequestParamenter data, int page = 1, int pageSize = 5)
        {
            var employees = await GetPayslipAdmin(data);
            string generatedBy = HttpContext.Session.GetString("Name"); // Get logged-in user
            string reportDate = DateTime.Now.ToString("MMMM dd, yyyy HH:mm:ss");
            string datefrom = $"{data.DateFrom:MMMM dd, yyyy}";
            string dateto=$"{data.DateTo:MMMM dd, yyyy}";
            using (var workbook = new XLWorkbook())
            {
                var worksheet = workbook.Worksheets.Add("Employees");
                var currentRow = 1;
                worksheet.Cell(currentRow, 1).Value = "Employee Payslip Report";
                worksheet.Range(currentRow, 1, currentRow, 12).Merge().Style
                    .Font.SetBold()
                    .Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                currentRow++;
                worksheet.Cell(currentRow, 1).Value = "Generated By:";
                worksheet.Cell(currentRow, 2).Value = generatedBy;
                worksheet.Cell(currentRow, 2).Style.Font.SetBold();
                currentRow++; // Move to the next row

                // **Report Date**
                worksheet.Cell(currentRow, 1).Value = "Date Generated:";
                worksheet.Cell(currentRow, 2).Value = reportDate;
                worksheet.Cell(currentRow, 2).Style.Font.SetBold();
                currentRow++;
                worksheet.Cell(currentRow, 1).Value = "Report Date Range:";
                worksheet.Cell(currentRow, 2).Value = datefrom + " - " + dateto;
                worksheet.Cell(currentRow, 2).Style.Font.SetBold();
                currentRow += 2; // Space before table headers
                // Add Header
                worksheet.Cell(currentRow, 1).Value = "EmployeeNumber";
                worksheet.Cell(currentRow, 2).Value = "EmployeeName";
                worksheet.Cell(currentRow, 3).Value = "GrossPay";
                worksheet.Cell(currentRow, 4).Value = "NetPay";
                worksheet.Cell(currentRow, 5).Value = "Tax";
                worksheet.Cell(currentRow, 6).Value = "SSS";
                worksheet.Cell(currentRow, 7).Value = "PhilHealth";
                worksheet.Cell(currentRow, 8).Value = "PagIbig";
                worksheet.Cell(currentRow, 9).Value = "TotalDeductions";
                worksheet.Cell(currentRow, 10).Value = "RenderedHours";
                worksheet.Cell(currentRow, 11).Value = "OvertimePay";
                worksheet.Cell(currentRow, 12).Value = "OvertimeHours";
                worksheet.Range(currentRow, 1, currentRow, 12).Style
                    .Font.SetBold()
                    .Fill.SetBackgroundColor(XLColor.LightGray)
                    .Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center)
                    .Border.SetOutsideBorder(XLBorderStyleValues.Thin) // ✅ Correct way to set borders
                    .Border.SetInsideBorder(XLBorderStyleValues.Thin);
           
                foreach (var emp in employees)
                {
                    currentRow++;
                    worksheet.Cell(currentRow, 1).Value = emp.EmployeeNumber;
                    worksheet.Cell(currentRow, 2).Value = emp.EmployeeName;
                    worksheet.Cell(currentRow, 3).Value = emp.GrossPay;
                    worksheet.Cell(currentRow, 4).Value = emp.NetPay;
                    worksheet.Cell(currentRow, 5).Value = emp.Tax;
                    worksheet.Cell(currentRow, 6).Value = emp.SSS;
                    worksheet.Cell(currentRow, 7).Value = emp.PhilHealth;
                    worksheet.Cell(currentRow, 8).Value = emp.PagIbig;
                    worksheet.Cell(currentRow, 9).Value = emp.TotalDeductions;
                    worksheet.Cell(currentRow, 10).Value = emp.RenderedHours;
                    worksheet.Cell(currentRow, 11).Value = emp.OvertimePay;
                    worksheet.Cell(currentRow, 12).Value = emp.OvertimeHours;


                    worksheet.Cell(currentRow, 3).Style.NumberFormat.Format = "#,##0.00";
                    worksheet.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                    worksheet.Cell(currentRow, 5).Style.NumberFormat.Format = "#,##0.00";
                    worksheet.Cell(currentRow, 6).Style.NumberFormat.Format = "#,##0.00";
                    worksheet.Cell(currentRow, 7).Style.NumberFormat.Format = "#,##0.00";
                    worksheet.Cell(currentRow, 8).Style.NumberFormat.Format = "#,##0.00";
                    worksheet.Cell(currentRow, 9).Style.NumberFormat.Format = "#,##0.00";
                    worksheet.Cell(currentRow, 10).Style.NumberFormat.Format = "#,##0.00";
                    worksheet.Cell(currentRow, 11).Style.NumberFormat.Format = "#,##0.00";
                    worksheet.Cell(currentRow, 12).Style.NumberFormat.Format = "#,##0.00";

                    worksheet.Range(currentRow, 1, currentRow, 12).Style
                    .Border.SetOutsideBorder(XLBorderStyleValues.Thin) // ✅ Correct way to set borders
                    .Border.SetInsideBorder(XLBorderStyleValues.Thin);
              
                }

                worksheet.Columns().AdjustToContents();

                using (var stream = new MemoryStream())
                {
                    workbook.SaveAs(stream);
                    var content = stream.ToArray();
                    byte[] excelBytes = stream.ToArray();
                    SendEmailWithAttachment("ann.santos@odecci.com", excelBytes, "Employee-Payslip.xlsx",datefrom,dateto);

                    return File(content, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "Employee-Payslip.xlsx");
                }
            }
        }
        private string GetEmailBody(string datefrom, string dateto)
        {
            return $@"
                <p>Hello Finance Team,</p>

                <p>I hope this email finds you well.</p>

                <p>Please find attached the latest <strong>Payroll Report</strong> for the period covering 
                <strong>{datefrom} - {dateto}</strong>.</p>

                <p>This report was generated through <strong>Odecci HRIS</strong>.  
            To view all details, please <a href='https://eportal.odeccisolutions.com' target='_blank'>log in to your account</a>.</p>

                <p>Should you require any further details or clarifications, please do not hesitate to reach out.</p>

                <p>Best regards,</p>
            ";
        }
        public void SendEmailWithAttachment(string recipientEmail, byte[] fileBytes, string fileName,string datefrom, string dateto)
        {
            try
            {
                // **SMTP Configuration**
                //await client.ConnectAsync("smtp.office365.com", 587, MailKit.Security.SecureSocketOptions.StartTls);
                //await client.AuthenticateAsync("info@odecci.com", "Roq30573");
                //await client.SendAsync(message);
                //await client.DisconnectAsync(true);
                string smtpServer = "smtp.office365.com";  // Replace with your SMTP server
                int smtpPort = 587; // Use 465 for SSL or 587 for TLS
                string senderEmail = "info@odecci.com";  // Replace with your email
                string senderPassword = "Roq30573";  // Replace with your password

                using (var client = new SmtpClient(smtpServer, smtpPort))
                {
                    client.Credentials = new NetworkCredential(senderEmail, senderPassword);
                    client.EnableSsl = true;

                    using (var message = new MailMessage())
                    {
                        message.From = new MailAddress(senderEmail);
                        message.To.Add(new MailAddress(recipientEmail));
                        message.CC.Add("executives@odecci.com");
                        message.Subject = "Employee Payroll Report";
                        message.Body = GetEmailBody(datefrom, dateto);
                        message.IsBodyHtml = true;

                        // **Attach the Excel file**
                        using (var attachmentStream = new MemoryStream(fileBytes))
                        {
                            var attachment = new Attachment(attachmentStream, fileName, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
                            message.Attachments.Add(attachment);

                            // **Send Email**
                            client.Send(message);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error sending email: " + ex.Message);
            }
        }

        public IActionResult Payslip(int id , string datefrom, string dateto)
        {
            var data = new EmployeeFilters
            {
                id = id,
                datefrom = datefrom,
                dateto = dateto
            };
            var result = GetPayslip(data).GetAwaiter().GetResult().FirstOrDefault();
            var model = new TblPayslipVM
            {
                SSSNo = result.SSSNo,
                PhilNo = result.PhilNo,
                HMDF =result.HMDF,
                TIN =result.TIN,
                RenderedHours =result.RenderedHours,
                EmployeeName=result.EmployeeName,
                UserId = result.UserId,
                EmployeeNumber = result.EmployeeNumber,
                PayslipNumber=result.PayslipNumber,
                JobTitle = result.JobTitle,
                Department = result.Department,
                TaxNumber = result.TaxNumber,
                PayDate = result.PayDate,
                GrossPay = result.GrossPay,
                NetPay = result.NetPay,
                Tax = result.Tax,
                SSS = result.SSS,
                PhilHealth = result.PhilHealth,
                PagIbig = result.PagIbig,
                OtherDeductions = 0,
                TotalDeductions = result.TotalDeductions,
                OvertimeHours = result.OvertimeHours,
                OvertimePay = result.OvertimePay,
                DaysAbsent= result.DaysAbsent,
                DaysPresent= result.DaysPresent,
                AbsentDeduction= result.AbsentDeduction,
                EmployementStatus= result.EmployementStatus

            };
            decimal grossPay = result.GrossPay  ;      
            decimal overtimePay = result.OvertimePay;
            decimal tax = result.Tax;
            decimal SSS = result.SSS;   
            decimal PhilHealth = result.PhilHealth;   
            decimal PagIbig = result.PagIbig;   
            decimal absences = result.AbsentDeduction;   

            decimal totalPay = grossPay + overtimePay;
            decimal totalDeduction = tax + SSS + PhilHealth + absences + PagIbig;

            ViewBag.TotalPay = totalPay;
            ViewBag.TotalDeduction = totalDeduction;
            DateTime df = DateTime.Parse(datefrom);
            DateTime dt = DateTime.Parse(dateto);
            ViewBag.DateFrom = df.ToString("MMM dd yyyy");
            ViewBag.DateTo = dt.ToString("MMM dd yyyy");
            return PartialView("_Payslip", model);
        }
        public class EmployeeFilters
        {
            public int id { get; set; }
            public string datefrom { get; set; }
            public string dateto { get; set; }
        }
        public class RequestParamenter
        {
            public int? EmployeeID { get; set; }
            public string DateFrom { get; set; }
            public string DateTo { get; set; }
        }
        public class EmployeeFiltersAdmin
        {
            public string datefrom { get; set; }
            public string dateto { get; set; }
        }
 
        public async Task<List<TblPayslipVM>> GetPayslipAdmin(RequestParamenter data)
        {
            string result = "";
            var list = new List<TblPayslipVM>();
            try
            {

                HttpClient client = new HttpClient();
                var url = DBConn.HttpString + "/Payroll/ComputePayslipAdmin";
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(token_.GetValue());
                StringContent content = new StringContent(JsonConvert.SerializeObject(data), Encoding.UTF8, "application/json");
                using (var response = await client.PostAsync(url, content))
                {
                    string res = await response.Content.ReadAsStringAsync();
                    list = JsonConvert.DeserializeObject<List<TblPayslipVM>>(res);

                }
            }

            catch (Exception ex)
            {
                string status = ex.GetBaseException().ToString();
            }
            return list;
        }
        public async Task<List<TblPayslipVM>> GetPayslip(EmployeeFilters data)
        {
            var res = new List<TblPayslipVM>();

            try
            {
            
                HttpClient client = new HttpClient();
                var url = DBConn.HttpString + "/Payroll/ComputePayslip";
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token_.GetValue());
                StringContent content = new StringContent(JsonConvert.SerializeObject(data), Encoding.UTF8, "application/json");
                using (var response = await client.PostAsync(url, content))
                {
                    string result = await response.Content.ReadAsStringAsync();
                    res = JsonConvert.DeserializeObject<List<TblPayslipVM>>(result);

                }

            }

            catch (Exception ex)
            {
                string status = ex.GetBaseException().ToString();
            }
            return res;
        }
        public class NotificationPaginateModel
        {
            public string? CurrentPage { get; set; }
            public string? NextPage { get; set; }
            public string? PrevPage { get; set; }
            public string? TotalPage { get; set; }
            public string? PageSize { get; set; }
            public string? TotalRecord { get; set; }


        }
        public class FilterPayrollType
        {

            public string? PayrollType { get; set; }
            public int page { get; set; }
        }
        [HttpGet]
        public async Task<JsonResult> GetPayrollType()
        {
            
            string test = token_.GetValue();
            var url = DBConn.HttpString + "/PayrollType/PayrollTypeList";
            HttpClient client = new HttpClient();
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(token_.GetValue());

            string response = await client.GetStringAsync(url);
            List<TblPayrollType> models = JsonConvert.DeserializeObject<List<TblPayrollType>>(response);
            return new(models);
        }
        [HttpGet]
        public async Task<IActionResult> GetPayrollTypeList()
        {
            string test = token_.GetValue();
            var url = DBConn.HttpString + "/PayrollType/PayrollTypeList";
            HttpClient client = new HttpClient();
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(token_.GetValue());

            string response = await client.GetStringAsync(url);
            List<TblPayrollType> models = JsonConvert.DeserializeObject<List<TblPayrollType>>(response);
            return Json(new { draw = 1, data = models, recordFiltered = models?.Count, recordsTotal = models?.Count });
        }
        [HttpPost]
        public async Task<IActionResult> SavePayroll(TblPayrollType data)
        {
            string res = "";
            try
            {

                HttpClient client = new HttpClient();
                var url = DBConn.HttpString + "/PayrollType/save";

                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token_.GetValue());
                StringContent content = new StringContent(JsonConvert.SerializeObject(data), Encoding.UTF8, "application/json");
                using (var response = await client.PostAsync(url, content))
                {
                    HttpStatusCode statusCode = response.StatusCode;
                    int numericStatusCode = (int)statusCode;
                    if (numericStatusCode == 200)
                    {
                        res = numericStatusCode.ToString();
                    }
                    else
                    {
                        res = await response.Content.ReadAsStringAsync();
                    }
                }

            }

            catch (Exception ex)
            {
                status = ex.GetBaseException().ToString();
            }
            return Json(new { status = res });
        }

    }
}
