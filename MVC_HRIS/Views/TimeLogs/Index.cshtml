@using Microsoft.AspNetCore.Http;
@inject IHttpContextAccessor Accessor;
@{
    ViewData["Title"] = "Time Sheet";
    Layout = "~/Views/Shared/_Layout.cshtml";
    string message = "";
    if (ViewData["Message"] != null)
    {
        message = ViewData["Message"].ToString();
    }
}
<style>

</style>
@await Html.PartialAsync("~/Views/TimeLogs/_loader.cshtml");
<div id="dashboard-main-container">
    <div class="title-main-container">
        <div class="content-container">
            <h4 style="font-size: 26px;" class="text-left">@ViewData["Title"].ToString()</h4>
            @Html.Partial("_UserDetails")
        </div>
        <div class="top-main-container ">
        </div>
        <div class="main-container">
            <div class="content-filter">
                @* /*** date range car start *@
                <div class="select-date-container" id="ts-select-date-container">
                    <div class="date-range-card">
                        <div class="card-header">
                            <h4 class="card-title">Select Custom Date Range</h4>
                        </div>
                        <div class="card-body">
                            <div class="input-container-whole select">
                                <select id="ts-quick-select-date" class="mod-input" style="width:100%" required>
                                    <option value="" disabled selected></option>
                                    <option value="1">Today</option>
                                    <option value="7">Last 7 Days</option>
                                    <option value="30">Last 1 Month</option>
                                    <option value="12">Last 12 Months</option>
                                </select>
                                <label class="label-color label" for="selectday">Quick Select </label>
                                <div class="underline"></div>
                            </div>
                            <div class="input-container-whole date">
                                <label class="label-color label" for="datehired">From</label>
                                <input type="date" id="datefrom" value="@DateTime.Now.ToString("yyyy-MM-dd")" class="mod-input" />
                                <div class="underline"></div>
                            </div>
                            <div class="input-container-whole date">
                                <label class="label-color label" for="datehired">To</label>
                                <input type="date" id="dateto" value="@DateTime.Now.ToString("yyyy-MM-dd")" class="mod-input" />
                                <div class="underline"></div>
                            </div>
                        </div>
                        <div class="card-footer">

                            <button class="btn btn-danger" id="close-ts-select-date">Cancel</button>
                            <button class="btn btn-info" id="ts-apply-date">Apply</button>
                        </div>
                    </div>
                </div>
                @* /*** date range car end *@
                @*/*** Top Bar Start *@
                <div class="sub-content">
                    <div class="mod-form">
                        <div class="action-navbarv2">
                            
                            <div class="layer">
                                @* Date Range *@
                                <div class="input-holder">
                                    <div class="date-input" onclick="showSelectDateRange()">
                                        <button id="ts-select-date" class="form-control">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" viewBox="0 0 24 24"><path fill="var(--light)" d="M12 12h5v5h-5zm7-9h-1V1h-2v2H8V1H6v2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2m0 2v2H5V5zM5 19V9h14v10z" /></svg>
                                            Select Date Range
                                        </button>
                                    </div>
                                </div>
                                @* Select Month *@
                                <div class="input-holder">
                                    <div class="date-input select">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" viewBox="0 0 24 24"><path fill="var(--light)" d="M12 12h5v5h-5zm7-9h-1V1h-2v2H8V1H6v2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2m0 2v2H5V5zM5 19V9h14v10z" /></svg>
                                        <select id="ts-monthSelect" class="form-control">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" viewBox="0 0 24 24"><path fill="var(--light)" d="M12 12h5v5h-5zm7-9h-1V1h-2v2H8V1H6v2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2m0 2v2H5V5zM5 19V9h14v10z" /></svg>
                                        </select>
                                    </div>
                                </div>
                                @* Select Cutt Off *@

                                <div class="input-holder">
                                    <div class="date-input select">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="28" height="25" viewBox="0 0 28 25" fill="none">
                                            <path d="M19.875 16.025L22.925 17.7875L21.9875 19.4125L18 17.1125V12.5H19.875V16.025ZM28 16.25C28 21.0875 24.0875 25 19.25 25C14.4125 25 10.5 21.0875 10.5 16.25C10.5 15.825 10.5375 15.4125 10.6 15H0.5V0H23V8.35C25.95 9.7625 28 12.7625 28 16.25ZM11.35 12.5C11.575 12.05 11.8125 11.625 12.1 11.2125C11.9875 11.25 11.875 11.25 11.75 11.25C9.675 11.25 8 9.575 8 7.5C8 5.425 9.675 3.75 11.75 3.75C13.825 3.75 15.5 5.425 15.5 7.5C15.5 7.8125 15.45 8.125 15.375 8.4125C16.55 7.8375 17.8625 7.5 19.25 7.5C19.675 7.5 20.0875 7.5375 20.5 7.6V5C19.837 5 19.2011 4.73661 18.7322 4.26777C18.2634 3.79893 18 3.16304 18 2.5H5.5C5.5 3.8875 4.3875 5 3 5V10C3.66304 10 4.29893 10.2634 4.76777 10.7322C5.23661 11.2011 5.5 11.837 5.5 12.5H11.35ZM25.5 16.25C25.5 12.8 22.7 10 19.25 10C15.8 10 13 12.8 13 16.25C13 19.7 15.8 22.5 19.25 22.5C22.7 22.5 25.5 19.7 25.5 16.25Z" fill="white" />
                                        </svg>
                                        <select id="tsCuttOff">
                                            <option value="0" selected> First Cutt-off</option>
                                            <option value="1"> Second Cutt-off</option>
                                        </select>
                                    </div>
                                </div>
                                @* <div class="input-holder">
                                    <span class="text-left text-dark">From:</span>
                                    <div class="date-input">
                                        <input type="date" id="datefrom" class="mod-inputs-nw" placeholder="Date" /> *@
                                        @* <input type="date" id="dateto" class="mod-inputs-nw" placeholder="Date" /> *@
                                @*     </div>
                                </div>
                                <div class="input-holder">
                                    <span class="text-left text-dark">To:</span>
                                    <div class="date-input"> *@
                                        @* <input type="date" id="datefrom" class="mod-inputs-nw" placeholder="Date" /> *@
                                @*         <input type="date" id="dateto" class="mod-inputs-nw" placeholder="Date" />
                                    </div>
                                </div> *@
                            </div>
                            <div class="layer">
                                @* <div class="input-container"> *@
                                <div id="time-btn-holder" class="time-btn-holder" style="display: flex; gap: 10px;">
                                    @* Not Regular clock in/out button Start*@

                                    @* <button class="btn btn-info" id="add-timein" title="Time In">
                                        <i class="fa-solid fa-clock"></i> Time In
                                    </button>*@
                                    @* <button class="btn btn-info" id="show-timeout-modal" title="Time Out">
                                        <i class="fa-solid fa-clock"></i> Time Out
                                    </button>  *@
                                    @* Not Regular clock in/out button End*@
                                    @* Regular clock in/out button Start*@
                                    @* <button class="btn btn-info" id="add-timein-regular" title="Time In">
                                        <i class="fa-solid fa-clock"></i> Time In
                                    </button> *@
                                    @* <button class="btn btn-info" id="add-timeout-regular" title="Time Out">
                                        <i class="fa-solid fa-clock"></i> Time Out
                                    </button> *@
                                    @* <button class="btn btn-info" id="break-regular" title="Time Out">
                                        <i class="fa-solid fa-clock"></i> Break
                                    </button> *@
                                    <select id="break-regular" style="display: block;background: transparent !important;color: var(--accent) !important;font-weight: 700 !important;border: 2px solid var(--accent);box-shadow: none;">
                                        <option value="0" disabled selected>Break</option>
                                        <option value="1">15 minutes break(First)</option>
                                        <option value="2">Lunch break</option>
                                        <option value="3">15 minutes break(Second)</option>
                                    </select>
                                    @* Regular clock in/out button End*@
                                    @* <button class="btn btn-info" id="add-timelogs" title="Manual Entry" onclick="myFunctionOpen()">
                                        <i class="fa-solid fa-plus"></i> Manual Entry
                                    </button> *@
                                    <div class="filing-container" id="tl-filing-container">
                                        <div class="filing-card">
                                            <div class="card-header">
                                                <h4>
                                                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-width="1.5"><path stroke-linejoin="round" d="M12 4v10m0 0l3-3m-3 3l-3-3" /><path d="M12 20a8 8 0 0 1-8-8m16 0a7.99 7.99 0 0 1-3 6.245" /></g></svg>
                                                    Import
                                                </h4>
                                            </div>
                                            @using (Html.BeginForm("TLIndex", "TimeLogs", FormMethod.Post, new { enctype = "multipart/form-data" }))
                                            {
                                                <label for="file" class="" style="font-weight: 400">
                                                    @* <div class="custum-file-upload"> *@
                                                    @* <i class="fa-solid fa-file-import"></i>
                                Import
                                <input id="file" type="file" onchange="submitForm()"> *@

                                                    @* </div> *@
                                                    @* <input id="upload-excel" type="file" size="1" name="file" accept="excel/*" class="form-control-sm mb-1"> *@
                                                    @* <button type="submit" class="btn btn-success btn-upload" id="btnimport" data-toggle="tooltip" title="Import Excel"> *@
                                                    @* <i class="fas fa-upload"></i>  *@
                                                    @* <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#fff"><path d="M440-320v-326L336-542l-56-58 200-200 200 200-56 58-104-104v326h-80ZM240-160q-33 0-56.5-23.5T160-240v-120h80v120h480v-120h80v120q0 33-23.5 56.5T720-160H240Z" /></svg> *@
                                                    @* Upload
                            </button> *@
                                                    <div class="drop-zone" id="tl-drop-zone">
                                                        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32"><path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 22c-9 1-8-10 0-9C6 2 23 2 22 10c10-3 10 13 1 12m-12-4l5-4l5 4m-5-4v15" /></svg>
                                                        <p id="tl-drag-file-label">Click or drag file to this area to upload</p>
                                                        <input id="tl-upload-excel" type="file" size="1" name="file" accept="excel/*" class="form-control-sm mb-1" required>
                                                    </div>
                                                    <div class="card-header">
                                                        <p>Formats accepted are .csv and .xlsx</p>
                                                    </div>
                                                </label>
                                                <div class="dl-template">
                                                    <p>If you do not have a file you can use the template below:</p>
                                                    <span class="btn btn-secondary template" id="add-timelogs" title="Download" onclick="downloadTLTemplate()">
                                                        @* <i class="fa-solid fa-file-arrow-down"></i> *@ 
                                                        <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 12 12"><path fill="none" stroke="#31aa2c" stroke-linecap="round" d="M3.5 5.5h1m-1 2h1m-1 2h1m2-4h2m-2 2h2m-2 2h2m2-6.29V11c0 .28-.22.5-.5.5H2c-.28 0-.5-.22-.5-.5V1c0-.28.22-.5.5-.5h5.79c.13 0 .26.05.35.15l2.21 2.21c.1.09.15.21.15.35zM7.5.5V3c0 .28.22.5.5.5h2.5" stroke-width="1" /></svg>
                                                        Download Template
                                                    </span>
                                                </div>
                                                <div class="card-footer">
                                                    <span class="btn btn-success cancel" id="tl-close-filing-container"> Cancel</span>
                                                    <button type="submit" class="btn btn-success upload" id="" data-toggle="tooltip" title="Import Excel">
                                                        @* <i class="fas fa-upload"></i>  *@
                                                        @* <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#fff"><path d="M440-320v-326L336-542l-56-58 200-200 200 200-56 58-104-104v326h-80ZM240-160q-33 0-56.5-23.5T160-240v-120h80v120h480v-120h80v120q0 33-23.5 56.5T720-160H240Z" /></svg> *@
                                                        Upload
                                                    </button>
                                                </div>
                                            }

                                        </div>
                                    </div>
                                    @* <button class="btn btn-primary" id="import-timelogs" title="Import" onclick="">
                                        <i class="fa-solid fa-file-import"></i> Import
                                    </button> *@
                                </div>
                                @* </div> *@
                            </div>
                        </div>
                    </div>
                    <div class="mod-form action-navbar pos" id="action-navbar-ts" style="margin-bottom: 2px;">
                        <div class="action-btns">
                            <div class="input-container" id="add-timein-regular-btn">
                                <a>Time In </a>
                                <button class="btn btn-info" id="add-timein-regular" title="Time In" onclick="">
                                    @* <i class="fas fa-user-plus"></i> Create Position *@ 
                                    @* <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 28 28"><path fill="currentColor" d="M9.5 4a4.5 4.5 0 1 0 0 9a4.5 4.5 0 0 0 0-9m-3 4.5a3 3 0 1 1 6 0a3 3 0 0 1-6 0M20 6a3.5 3.5 0 1 0 0 7a3.5 3.5 0 0 0 0-7m-2 3.5a2 2 0 1 1 4 0a2 2 0 0 1-4 0M4.25 15A2.25 2.25 0 0 0 2 17.25v.531a2 2 0 0 0 .017.242c.017.153.049.363.11.612a5.1 5.1 0 0 0 .867 1.815C4.008 21.803 5.942 23 9.5 23c1.531 0 2.762-.222 3.747-.582a7.5 7.5 0 0 1-.236-1.518c-.836.355-1.97.6-3.511.6c-3.192 0-4.633-1.053-5.306-1.95a3.6 3.6 0 0 1-.61-1.279a3 3 0 0 1-.083-.508l-.001-.018v-.495a.75.75 0 0 1 .75-.75h9.905a7.5 7.5 0 0 1 1.168-1.426A2.3 2.3 0 0 0 14.75 15zM27 20.5a6.5 6.5 0 1 1-13 0a6.5 6.5 0 0 1 13 0m-6-4a.5.5 0 0 0-1 0V20h-3.5a.5.5 0 0 0 0 1H20v3.5a.5.5 0 0 0 1 0V21h3.5a.5.5 0 0 0 0-1H21z" /></svg> *@
                                    <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 24 24"><path fill="#fff" d="M12 1C8.14 1 5 4.14 5 8a7 7 0 0 0 7 7c3.86 0 7-3.13 7-7c0-3.86-3.14-7-7-7m0 2.15c2.67 0 4.85 2.17 4.85 4.85s-2.18 4.85-4.85 4.85A4.85 4.85 0 0 1 7.15 8A4.85 4.85 0 0 1 12 3.15M11 5v3.69l3.19 1.84l.75-1.3l-2.44-1.41V5M4 16v8h2v-3h12v3l4-4l-4-4v3H6v-3" /></svg>
                                </button>
                            </div>
                            <div class="input-container" id="add-timein-btn">
                                <a>Time In </a>
                                <button class="btn btn-info" id="add-timein" title="Time In" onclick="">
                                    @* <i class="fas fa-user-plus"></i> Create Position *@ 
                                    @* <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 28 28"><path fill="currentColor" d="M9.5 4a4.5 4.5 0 1 0 0 9a4.5 4.5 0 0 0 0-9m-3 4.5a3 3 0 1 1 6 0a3 3 0 0 1-6 0M20 6a3.5 3.5 0 1 0 0 7a3.5 3.5 0 0 0 0-7m-2 3.5a2 2 0 1 1 4 0a2 2 0 0 1-4 0M4.25 15A2.25 2.25 0 0 0 2 17.25v.531a2 2 0 0 0 .017.242c.017.153.049.363.11.612a5.1 5.1 0 0 0 .867 1.815C4.008 21.803 5.942 23 9.5 23c1.531 0 2.762-.222 3.747-.582a7.5 7.5 0 0 1-.236-1.518c-.836.355-1.97.6-3.511.6c-3.192 0-4.633-1.053-5.306-1.95a3.6 3.6 0 0 1-.61-1.279a3 3 0 0 1-.083-.508l-.001-.018v-.495a.75.75 0 0 1 .75-.75h9.905a7.5 7.5 0 0 1 1.168-1.426A2.3 2.3 0 0 0 14.75 15zM27 20.5a6.5 6.5 0 1 1-13 0a6.5 6.5 0 0 1 13 0m-6-4a.5.5 0 0 0-1 0V20h-3.5a.5.5 0 0 0 0 1H20v3.5a.5.5 0 0 0 1 0V21h3.5a.5.5 0 0 0 0-1H21z" /></svg> *@
                                    <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 24 24"><path fill="#fff" d="M12 1C8.14 1 5 4.14 5 8a7 7 0 0 0 7 7c3.86 0 7-3.13 7-7c0-3.86-3.14-7-7-7m0 2.15c2.67 0 4.85 2.17 4.85 4.85s-2.18 4.85-4.85 4.85A4.85 4.85 0 0 1 7.15 8A4.85 4.85 0 0 1 12 3.15M11 5v3.69l3.19 1.84l.75-1.3l-2.44-1.41V5M4 16v8h2v-3h12v3l4-4l-4-4v3H6v-3" /></svg>

                                </button>
                            </div>
                            <div class="input-container" id="add-timeout-regular-btn">
                                <a>Time Out </a>
                                <button class="btn btn-info" id="add-timeout-regular" title="Time Out" onclick="" style="background: #EC1C24;">
                                    @* <i class="fas fa-user-plus"></i> Create Position *@ 
                                    @* <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 28 28"><path fill="currentColor" d="M9.5 4a4.5 4.5 0 1 0 0 9a4.5 4.5 0 0 0 0-9m-3 4.5a3 3 0 1 1 6 0a3 3 0 0 1-6 0M20 6a3.5 3.5 0 1 0 0 7a3.5 3.5 0 0 0 0-7m-2 3.5a2 2 0 1 1 4 0a2 2 0 0 1-4 0M4.25 15A2.25 2.25 0 0 0 2 17.25v.531a2 2 0 0 0 .017.242c.017.153.049.363.11.612a5.1 5.1 0 0 0 .867 1.815C4.008 21.803 5.942 23 9.5 23c1.531 0 2.762-.222 3.747-.582a7.5 7.5 0 0 1-.236-1.518c-.836.355-1.97.6-3.511.6c-3.192 0-4.633-1.053-5.306-1.95a3.6 3.6 0 0 1-.61-1.279a3 3 0 0 1-.083-.508l-.001-.018v-.495a.75.75 0 0 1 .75-.75h9.905a7.5 7.5 0 0 1 1.168-1.426A2.3 2.3 0 0 0 14.75 15zM27 20.5a6.5 6.5 0 1 1-13 0a6.5 6.5 0 0 1 13 0m-6-4a.5.5 0 0 0-1 0V20h-3.5a.5.5 0 0 0 0 1H20v3.5a.5.5 0 0 0 1 0V21h3.5a.5.5 0 0 0 0-1H21z" /></svg> *@
                                    <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 24 24"><path fill="#fff" d="M12 1C8.14 1 5 4.14 5 8a7 7 0 0 0 7 7c3.86 0 7-3.13 7-7c0-3.86-3.14-7-7-7m0 2.15c2.67 0 4.85 2.17 4.85 4.85s-2.18 4.85-4.85 4.85A4.85 4.85 0 0 1 7.15 8A4.85 4.85 0 0 1 12 3.15M11 5v3.69l3.19 1.84l.75-1.3l-2.44-1.41V5M15 16v3H3v2h12v3l4-4m0 0v4h2v-8h-2" /></svg>
                                </button>
                            </div>
                            <div class="input-container" id="show-timeout-modal-btn">
                                <a>Time Out </a>
                                <button class="btn btn-info" id="show-timeout-modal" title="Time Out" onclick="" style="background: #EC1C24;">
                                    @* <i class="fas fa-user-plus"></i> Create Position *@ 
                                    @* <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 28 28"><path fill="currentColor" d="M9.5 4a4.5 4.5 0 1 0 0 9a4.5 4.5 0 0 0 0-9m-3 4.5a3 3 0 1 1 6 0a3 3 0 0 1-6 0M20 6a3.5 3.5 0 1 0 0 7a3.5 3.5 0 0 0 0-7m-2 3.5a2 2 0 1 1 4 0a2 2 0 0 1-4 0M4.25 15A2.25 2.25 0 0 0 2 17.25v.531a2 2 0 0 0 .017.242c.017.153.049.363.11.612a5.1 5.1 0 0 0 .867 1.815C4.008 21.803 5.942 23 9.5 23c1.531 0 2.762-.222 3.747-.582a7.5 7.5 0 0 1-.236-1.518c-.836.355-1.97.6-3.511.6c-3.192 0-4.633-1.053-5.306-1.95a3.6 3.6 0 0 1-.61-1.279a3 3 0 0 1-.083-.508l-.001-.018v-.495a.75.75 0 0 1 .75-.75h9.905a7.5 7.5 0 0 1 1.168-1.426A2.3 2.3 0 0 0 14.75 15zM27 20.5a6.5 6.5 0 1 1-13 0a6.5 6.5 0 0 1 13 0m-6-4a.5.5 0 0 0-1 0V20h-3.5a.5.5 0 0 0 0 1H20v3.5a.5.5 0 0 0 1 0V21h3.5a.5.5 0 0 0 0-1H21z" /></svg> *@
                                    <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 24 24"><path fill="#fff" d="M12 1C8.14 1 5 4.14 5 8a7 7 0 0 0 7 7c3.86 0 7-3.13 7-7c0-3.86-3.14-7-7-7m0 2.15c2.67 0 4.85 2.17 4.85 4.85s-2.18 4.85-4.85 4.85A4.85 4.85 0 0 1 7.15 8A4.85 4.85 0 0 1 12 3.15M11 5v3.69l3.19 1.84l.75-1.3l-2.44-1.41V5M15 16v3H3v2h12v3l4-4m0 0v4h2v-8h-2" /></svg>
                                </button>
                            </div>
                            <div class="input-container ">
                                <a>Manual Entry </a>
                                <button class="btn btn-info white-bg" id="add-timelogs" title="Add New Employee" onclick="myFunctionOpen()">
                                    @* <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" viewBox="0 0 24 24"><g fill="none" stroke="#205274" stroke-linecap="round" stroke-width="1.5"><path stroke-linejoin="round" d="M12 4v10m0 0l3-3m-3 3l-3-3" /><path d="M12 20a8 8 0 0 1-8-8m16 0a7.99 7.99 0 0 1-3 6.245" /></g></svg> *@
                                    <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" viewBox="0 0 2048 2048"><path fill="#205274" d="M1536 1408h192v128h-320v-384h128zm-256-896H256V384h1024zm192 384q119 0 224 45t183 124t123 183t46 224q0 119-45 224t-124 183t-183 123t-224 46q-119 0-224-45t-183-124t-123-183t-46-224q0-119 45-224t124-183t183-123t224-46m0 1024q93 0 174-35t142-96t96-142t36-175q0-93-35-174t-96-142t-142-96t-175-36q-93 0-174 35t-142 96t-96 142t-36 175q0 93 35 174t96 142t142 96t175 36M1166 768q-109 48-200 128H256V768zm-391 384q-14 31-25 63t-21 65H256v-128zm-519 384h451q3 32 8 64t14 64H256zm594 384q50 71 116 128H0V0h1536v707l-32-2q-16-1-32-1t-32 1t-32 2V128H128v1792z" /></svg>
                                </button>
                            </div>
                            <div class="input-container ">
                                <a>Import </a>
                                <button class="btn btn-info white-bg" id="import-timelogs" title="Add New Employee" onclick="">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" viewBox="0 0 24 24"><g fill="none" stroke="#205274" stroke-linecap="round" stroke-width="1.5"><path stroke-linejoin="round" d="M12 4v10m0 0l3-3m-3 3l-3-3" /><path d="M12 20a8 8 0 0 1-8-8m16 0a7.99 7.99 0 0 1-3 6.245" /></g></svg>
                                </button>
                            </div> 
                            
                        </div>
                    </div>
                </div>
                @*/*** Top Bar End *@

                @* /*** Table Start *@
                <div class="content-filter-tbl">
                    <table id="time-table" class="table table-bordered table-hover w-100">
                        <thead>
                        </thead>
                        <tbody>
                        </tbody>

                    </table>
                    <div id="table-footer">
                    </div>

                </div>
                @* /*** Table End *@
            </div>
            @* /*** Total rendered hours start *@
            <div class="total-hrs-holder" style="display:flex;width:100%;margin-bottom:20px;">

                <div class="total-hrs" style=" width: 100%; text-align: right;">

                    <label class="text-left" id="totalamountEmp" style="
                        font-size: 25px;
                        font-weight: bolder;
                        color: #17a2b8;
                    "></label>
                </div>
            </div>

            @* /*** Total rendered hours end *@
        </div>
    </div>

    <div class="modal-holder" id="tlmodal" style="display: none">
        <div class="timelogsmodal">
            <div class="header">
                <h3>Add Timelogs</h3>
                <button class="closemodal" id="closemodal" aria-label="Close" onclick="myFunction()"></button>
            </div>
            <form id="add-time-logs-form">
                <div class="input-holder">
                    <span class="label">Date</span>
                    <div class="input-container">
                        <input type="hidden" id="mtlid" class="mod-inputs-nw" placeholder="Date" required value="0" />
                        <input type="date" id="mtldate" class="mod-inputs-nw" placeholder="Date" required />
                    </div>
                </div>
                <div class="input-holder">
                    <span class="label">Time In</span>
                    <div class="input-container">
                        <input type="datetime-local" id="mtltimein" class="mod-inputs-nw" placeholder="Date" required />
                    </div>
                </div>
                <div class="input-holder">
                    <span class="label">Time Out</span>
                    <div id="error-message" class="error">Error: Time Out cannot be earlier than Time In.</div>
                    <div class="input-container">
                        <!-- Error message container placed above the timeout field -->
                        <input type="datetime-local" id="mtltimeout" class="mod-inputs-nw" placeholder="Date" required />
                    </div>
                </div>
                <div class="input-holder">
                    <span class="label">Break(Hour/s)</span>
                    <div class="input-container">
                        <!-- Error message container placed above the timeout field -->
                        <input type="number" step="0.01" min="0" id="mtlbreak" class="mod-inputs-nw" placeholder="0.00" required />
                    </div>
                </div>
                <div class="input-holder">
                    <span class="label">Task</span>
                    <div class="input-container">
                        <select id="manualtask" required>
                        </select>
                    </div>
                </div>
                <div class="input-holder">
                    <span class="label">Task Description</span>
                    <div class="input-container">
                        <textarea id="mtlremarks" rows="10" required></textarea>
                    </div>
                </div>
                <div class="input-holder">
                    <div class="input-container">
                        <input type="submit" value="Save" id="add-time-logs" disabled />
                    </div>
                </div>
            </form>
        </div>
    </div>
    @* <div class="modal-holder" id="timodal" style="display: none">
    <div class="timelogsmodal">
    <div class="header">
    <h3>Time In</h3>
    <button class="closemodal" id="closemodal" aria-label="Close" onclick="myFunction()"></button>
    </div>
    <form id="add-time-in-form">
    <div class="mod-form">
    <span class="text-left">Date</span>
    <div class="input-container-2">
    <input type="date" value="@DateTime.Now.ToString("yyyy-MM-dd")" id="dateto" class="mod-inputs-nw" placeholder="Date" disabled />
    </div>
    </div>
    <div class="mod-form">
    <span class="text-left">Task</span>
    <div class="input-container-2">
    <div id="mode-inputs">
    <select id="task" style="width: 100%;margin-top:10px" required>
    </select>
    </div>
    </div>
    <div class="mod-form">
    <span class="text-left">Task Description</span>
    <div class="input-container-2">
    <div id="mode-inputs">
    @* <input type="textarea" value="" id="remarks" class="mod-input" required style="width:100%;" rows="10" cols="30" />
    <textarea id="remarks" rows="10" cols="30" class="mod-input" required></textarea>
    </div>
    </div>
    </div>
    <div class="mod-form" style="margin-top:25px">
    <div class="input-container-2">
    <div id="mode-inputs">
    <input type="submit" value="Time In" id="btn-timein" class="btn-footer" style="width: 100%;" />
    </div>
    </div>
    </div>
    </form>
    </div>
    </div> *@
    <div class="timeout-modal-holder" id="timeoutModal">
        <div class="timelogsmodal">
            <div class="header">
                <h3>Timeout</h3>
                <button class="closemodal" id="closemodal" aria-label="Close" onclick="myFunction()"></button>
            </div>
            <form id="add-time-out-form">
                <div class="input-holder">
                    <span class="label">Time Out Reason:</span>
                    <div class="input-container">
                        <select id="timeoutreason" required>
                            <option value="0" disabled selected>Select time out reason</option>
                            <option value="15 minutes break">15 minutes break</option>
                            <option value="Lunch break">Lunch break</option>
                            <option value="End of shift">End of shift</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                    <div class="input-holder" id="timeoutreasonholder">
                        <span class="label">Specify Other Reason:</span>
                        <div class="input-container">
                            <textarea id="otherreason" rows="10"></textarea>
                        </div>
                    </div>
                    <div class="input-holder">
                        <div class="input-container">
                            <input type="submit" value="Submit" id="add-timeout" />
                        </div>
                    </div>
                </div>

            </form>
        </div>
    </div>
    @* <div class="float-btn">
        <i id="open-float-btn" class="fa-solid fa-plus"></i>
        <i id="close-float-btn" class="fa-solid fa-close"></i>
    </div> *@
    <div class="pencil-action" id="ts-pencil-action" onclick="tsActionFunction();">
        <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 24 24"><path fill="none" stroke="#fff" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v14m-7-7h14" /></svg>
    </div>
</div>
@section Scripts {
    <script>

        var actionts = document.getElementById('action-navbar-ts');
        var pencilts = document.getElementById('ts-pencil-action');
        var uid = "@Accessor.HttpContext.Session.GetString("UserID")";
        var empType = "@Accessor.HttpContext.Session.GetString("EmployeeTypeName")";
        // console.log(empType);
        if (empType == "Regular") {
            document.getElementById('add-timein-btn').style.display = "none";
            document.getElementById('show-timeout-modal-btn').style.display = "none";
            document.getElementById('add-timein-regular-btn').style.display = "block";
            document.getElementById('add-timeout-regular-btn').style.display = "block";
            document.getElementById('break-regular').style.display = "block";
        }
        else {
            document.getElementById('add-timein-btn').style.display = "block";
            document.getElementById('show-timeout-modal-btn').style.display = "block";
            document.getElementById('add-timein-regular-btn').style.display = "none";
            document.getElementById('add-timeout-regular-btn').style.display = "none";
            document.getElementById('break-regular').style.display = "none";
        }

        $('#add-timeout-regular').on('click', function () {
            $('#add-timeout-regular').attr('disabled', 'disabled');
            event.preventDefault();
            var data = {
                userid: @Accessor.HttpContext.Session.GetString("Id")
                                                };
            $.ajax({
                url: '/TimeLogs/RegularTimeOut',
                data: {
                    data: data,
                },
                type: "POST",
                datatype: "json",
                complete: function (xhr) {
                    
                },
            }).done(function (data) {
                // console.log(data);
                if (data.status == '200') {

                    notifyMsg('Success!', 'Successfully Saved', 'green', 'fas fa-check');

                    window.location.href = '@Url.Action("Index", "Timelogs")';
                }
                else {
                    notifyMsg('Warning!', data.status, 'red', 'fas fa-exclamation-triangle');
                }

            });
            initializeDataTable();
        });
        $('#add-timein-regular').on('click', function () {
            $('#add-timein-regular').attr('disabled', 'disabled');
            const now = new Date();
            const hours = now.getHours();

            var clockIn = "Regular Clock In";

            
            var data = {
                TaskId: 13,
                userid: @Accessor.HttpContext.Session.GetString("Id"),
                Remarks: clockIn,
                StatusId: 1
            };
            $.ajax({
                url: '/TimeLogs/RegularTimeIn',
                data: {
                    data: data,
                },
                type: "POST",
                datatype: "json",
                complete: function (xhr) {
                },
            }).done(function (data) {
                // console.log(data);
                if (data.status == '200') {

                    notifyMsg('Success!', 'Successfully Saved', 'green', 'fas fa-check');
                    window.location.href = '@Url.Action("Index", "Timelogs")';
                }
                else {
                    notifyMsg('Warning!', data.status, 'red', 'fas fa-exclamation-triangle');
                }

            });
        });
        $('#break-regular').on('change', function () {
            const now = new Date();
            const hours = now.getHours();
            var breakType = document.getElementById('break-regular').value;
            var meridiem = 0;

            if (breakType == 2) {
                meridiem = 2;
            }
            else if (breakType == 1) {
                meridiem = 1;
            }
            else {
                meridiem = 3;
            }

            $('#break-regular').attr('disabled', 'disabled');
            event.preventDefault();
            var data = {
                userid: @Accessor.HttpContext.Session.GetString("Id"),
                Meridiem: meridiem
            };
            // console.log(data);
            $.ajax({
                url: '/TimeLogs/RegularBreak',
                data: {
                    data: data,
                },
                type: "POST",
                datatype: "json"
            }).done(function (data) {
                // console.log(data);
                if (data.status == '200') {

                    notifyMsg('Success!', 'Successfully Saved', 'green', 'fas fa-check');

                    window.location.href = '@Url.Action("Index", "Timelogs")';
                }
                else {
                    notifyMsg('Warning!', data.status, 'red', 'fas fa-exclamation-triangle');
                }

            });
            // var data = {
            //     TaskId: 10,
            //     userid: @Accessor.HttpContext.Session.GetString("Id"),
            //     Remarks: breakReason,
            //     StatusId: 5

            // };
            // $.ajax({
            //     url: '/TimeLogs/TimeIn',
            //     data: {
            //         data: data,
            //     },
            //     type: "POST",
            //     datatype: "json"
            // }).done(function (data) {
            //     // console.log(data);
            //     if (data.status == '200') {

            //         notifyMsg('Success!', 'Successfully Saved', 'green', 'fas fa-check');
            //         window.location.href = '@Url.Action("Index", "Timelogs")';
            //     }
            //     else {
            //         notifyMsg('Warning!', data.status, 'red', 'fas fa-exclamation-triangle');
            //     }

            // });
            initializeDataTable();
        });
        var tlmodal = document.getElementById('tlmodal')
        defaultdate();
        modalDom();
        $(document).ready(function () {
            TimelogsFileDrag();
            checkBreakTime();
            timeLogs();
            fetchtaskselect();
            fetchBreakselect();
            const timbtn = document.querySelectorAll('.time-btn');
            const dateinput = document.querySelectorAll('.date-input');
            var type = "@Accessor.HttpContext.Session.GetString("UserTypeName")";

            if (type == 'Admin') {
                timbtn.forEach(element => {
                    element.style.display = 'none';
                });
                dateinput.forEach(element => {
                    element.style.display = 'block';
                });
            }
            else {
                timbtn.forEach(element => {
                    element.style.display = 'block';
                });

            }
            // $("#add-timeout").prop("disabled", true);

            $("#show-timeout-modal").prop("disabled", true);
            $("#add-timein").prop("disabled", true);
            const data = { UserId: @Accessor.HttpContext.Session.GetString("Id")};
            $.ajax({
                url: '/TimeLogs/GetLastTimeIn',
                data: { data },
                type: "POST",
                datatype: "json"
            }).done(function (data) { // @* //  *@
                // alert(data.status);
                if (data.status == 'true') {
                    // $("#add-timeout").prop("disabled", false);
                    $("#show-timeout-modal").prop("disabled", false);
                    $("#add-timein").prop("disabled", true);
                    // $("#add-timeout-regular").prop("disabled", false);
                    // $("#add-timein-regular").prop("disabled", true);
                    // $("#break-regular").prop("disabled", false);
                }
                else {
                    // $("#add-timeout").prop("disabled", true);
                    $("#show-timeout-modal").prop("disabled", true);
                    $("#add-timein").prop("disabled", false);
                    // $("#add-timeout-regular").prop("disabled", true);
                    // $("#add-timein-regular").prop("disabled", false);
                    // $("#break-regular").prop("disabled", true);
                }
            });

            initializeDataTable();
        });
        function defaultdate() {

            const firstDayOfMonth = new Date(new Date().getFullYear(), new Date().getMonth(), 1);
            const lastDayOfMonth = new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0);

            // Format the dates as YYYY-MM-DD
            const formatDate = (date) => {
                let year = date.getFullYear();
                let month = date.getMonth() + 1; // Month is zero-indexed, so add 1
                let day = date.getDate();

                // Ensure month and day are always two digits
                if (month < 10) month = '0' + month;
                if (day < 10) day = '0' + day;

                return `${year}-${month}-${day}`;
            };

            // Set the values for the date inputs
            document.getElementById('datefrom').value = formatDate(firstDayOfMonth);
            document.getElementById('dateto').value = formatDate(lastDayOfMonth);
        }
        function emprenderedHours() {
            const data = {
                Usertype: '',
                UserId: @Accessor.HttpContext.Session.GetString("Id"),
                datefrom: $('#datefrom').val(),
                dateto: $('#dateto').val(),
                Department: ''
            };

            // console.log(data);
            $.ajax({
                url: '/Timelogs/GetTimelogsCount',
                data: {
                    data: data
                },
                type: "Post",
                datatype: "json",
                success: function (data) {
                    var total = 0;
                    var hours = 0;
                    // console.log(data);
                    for (var i = 0; i < data.length; i++) {
                        // console.log(data[i].statusId);
                        if (data[i].statusId == 1) {

                            hours = data[i].renderedHours;
                        }
                        else {
                            hours = 0;
                        }
                        total += parseFloat(hours);
                    }
                    // console.log(total.toFixed(2));
                    // $('#totalamount').html("Total Rendered Hours: " + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + total.toFixed(2));

                }
            });
        }
        var tableuserid = @Accessor.HttpContext.Session.GetString("Id");
        localStorage.setItem('tableuserid', tableuserid);



        $('#add-timein').on('click', function (event) {
            event.preventDefault();
            loadModal('/TimeLogs/TaskModal', '#defaultmodal', '<i class="fa-solid fa-business-time"></i> Time In', 'l', false)
            // document.getElementById('timodal').style.display = "flex";
        });
        // $('#add-time-in-form').on('submit', function (event) {
        //     event.preventDefault();
        //     var data = {
        //         userid: @Accessor.HttpContext.Session.GetString("Id")

        //                                 };
        //     $.ajax({
        //         url: '/TimeLogs/TimeOut',
        //         data: {
        //             data: data,
        //         },
        //         type: "POST",
        //         datatype: "json"
        //     }).done(function (data) {
        //         // console.log(data);
        //         if (data.status == '200') {

        //             // notifyMsg('Success!', 'Successfully Saved', 'green', 'fas fa-check');
        //             // window.location.href = '@Url.Action("Index", "Timelogs")';
        //         }
        //         else {
        //             // notifyMsg('Warning!', data.status, 'red', 'fas fa-exclamation-triangle');
        //         }

        //     });
        //     var data = {
        //         TaskId: $("#task").val(),
        //         userid: @Accessor.HttpContext.Session.GetString("Id"),
        //         Remarks: $("#remarks").val(),
        //         StatusId: 1

        //     };
        //     $.ajax({
        //         url: '/TimeLogs/TimeIn',
        //         data: {
        //             data: data,
        //         },
        //         type: "POST",
        //         datatype: "json"
        //     }).done(function (data) {
        //         console.log(data);
        //         if (data.status == '200') {

        //             notifyMsg('Success!', 'Successfully Saved', 'green', 'fas fa-check');
        //             window.location.href = '@Url.Action("Index", "Timelogs")';
        //         }
        //         else {
        //             notifyMsg('Warning!', data.status, 'red', 'fas fa-exclamation-triangle');
        //         }

        //     });
        // });
        $('#add-time-out-form').on('submit', function (event) {

            $('#add-timeout').attr('disabled', 'disabled');
            event.preventDefault();
            var data = {
                userid: @Accessor.HttpContext.Session.GetString("Id")
                                                };
            $.ajax({
                url: '/TimeLogs/TimeOut',
                data: {
                    data: data,
                },
                type: "POST",
                datatype: "json"
            }).done(function (data) {
                // console.log(data);
                if (data.status == '200') {

                    notifyMsg('Success!', 'Successfully Saved', 'green', 'fas fa-check');

                    window.location.href = '@Url.Action("Index", "Timelogs")';
                }
                else {
                    notifyMsg('Warning!', data.status, 'red', 'fas fa-exclamation-triangle');
                }

            });
            var data = {
                TaskId: $("#timeoutreason").val(),
                userid: @Accessor.HttpContext.Session.GetString("Id"),
                Remarks: $("#otherreason").val(),
                StatusId: 5

            };
            $.ajax({
                url: '/TimeLogs/TimeIn',
                data: {
                    data: data,
                },
                type: "POST",
                datatype: "json"
            }).done(function (data) {
                // console.log(data);
                if (data.status == '200') {

                    notifyMsg('Success!', 'Successfully Saved', 'green', 'fas fa-check');
                    window.location.href = '@Url.Action("Index", "Timelogs")';
                }
                else {
                    notifyMsg('Warning!', data.status, 'red', 'fas fa-exclamation-triangle');
                }

            });
            initializeDataTable();
        });

        function isValidDate(dateString) {

            return moment(dateString, 'DD-MM-YYYY', true).isValid() ||
                moment(dateString, 'YYYY-MM-DD', true).isValid();
        }
        // $('#datefrom, #dateto').on('change', function () {
        //     var dateFrom = document.getElementById('datefrom').value;
        //     var dateTo = document.getElementById('dateto').value;
        //     console.log(isValidDate(dateFrom));
        //     if (!isValidDate(dateFrom) || !isValidDate(dateTo)) {
        //         console.log('Invalid date format. Please enter a valid date (dd-MM-yyyy).');
        //         event.preventDefault(); Prevent form submission
        //     }
        //     else {
        //         initializeDataTable();
        //     }

        // });

        function myFunction() {
            var tomodal = document.getElementById('timeoutModal');
            // var timodal = document.getElementById('timodal');
            tlmodal.style.display = "none";
            tomodal.style.display = "none";
            // timodal.style.display = "none";
        }
        function myFunctiontimodal() {
            var timodal = document.getElementById('timodal');
            timodal.style.display = "none";
        }
        function myFunctionOpen() {
            document.getElementById('mtlid').value = 0;
            document.getElementById('mtldate').value = "";
            document.getElementById('mtltimein').value = "";
            document.getElementById('mtltimeout').value = "";
            document.getElementById('manualtask').value = "";
            document.getElementById('mtlremarks').value = "";
            document.getElementById('mtlbreak').value = 0;
            tlmodal.style.display = "flex";
        }




        // Edit Time Logs
        $('#time-table').on('click', '.tbl-edit', function () {
            var addLogBtn = document.getElementById('add-time-logs');
            addLogBtn.removeAttribute('disabled');
            var id = $(this).data('id');
            var status = $(this).data('status');
            var task = $(this).data('task');
            var dateString = $(this).data('date');
            var timein = $(this).data('timein');
            var timeout = $(this).data('timeout');
            var remarks = $(this).data('remarks');
            var userid = $(this).data('userid');
            var lunch = $(this).data('lunch');

            // Extract the date and time part from the string
            let dateParts = dateString.split(" ")[0].split("-"); // Get "05/01/2025"

            // console.log(dateParts);
            let month = dateParts[1].padStart(2, '0'); // Ensure two digits
            let day = dateParts[2].padStart(2, '0');   // Ensure two digits
            let year = dateParts[0];
            // Format the Date object to YYYY-MM-DD
            let formattedDate = "";
            // console.log("Date: "+ dateString);
            // console.log("Year: "+ year);
            // console.log("day: "+ day);
            // console.log("month: "+ month);
            formattedDate = year + '-' + month + '-' + day;

            document.getElementById('mtlid').value = id;
            document.getElementById('mtldate').value = formattedDate;
            document.getElementById('mtltimein').value = timein;
            document.getElementById('mtltimeout').value = timeout;
            document.getElementById('manualtask').value = task;
            document.getElementById('mtlbreak').value = lunch;
            document.getElementById('mtlremarks').value = remarks;
            tlmodal.style.display = "flex";
        });
        $('#time-table').on('click', '.tbl-delete', function () {
            var id = $(this).data('id');
            var status = $(this).data('status');
            var task = $(this).data('task');
            var dateString = $(this).data('date');
            var timein = $(this).data('timein');
            var timeout = $(this).data('timeout');
            var remarks = $(this).data('remarks');
            var userid = $(this).data('userid');
            var mtlbreak = $(this).data('lunch');
            localStorage.setItem('id', id);
            localStorage.setItem('status', status);
            localStorage.setItem('task', task);
            localStorage.setItem('dateString', dateString);
            localStorage.setItem('timein', timein);
            localStorage.setItem('timeout', timeout);
            localStorage.setItem('remarks', remarks);
            localStorage.setItem('userid', userid);
            localStorage.setItem('lunch', mtlbreak);

            deletemodalTimelogs();
            $("#alertmodal").modal('show');
        });
        emprenderedHours();
        // floatButtonDOM();
        function checkBreakTime() {
            const now = new Date();
            var hours = now.getHours();

            var clockIn = "";

            if (hours < 12) {
                clockIn = "AM";
            }
            else if (hours > 12 && hours < 13) {
                clockIn = "LUNCH";
            }
            else {
                clockIn = "PM";
            }
            const data = {
                userId: @Accessor.HttpContext.Session.GetString("Id"),
                TimeOfDay: clockIn
            };
            $.ajax({
                url: '/TimeLogs/PostCheckBreakTime',
                data: { data },
                type: "POST",
                datatype: "json"
            }).done(function (data) { // @* //  *@
                // console.log(data);
                // console.log(data.length);
                // console.log(hours);
                // hours = 12;
                // console.log(hours);
                var timeinbtn = document.getElementById('add-timein-regular');
                var timeoutbtn = document.getElementById('add-timeout-regular');
                var breakbtn = document.getElementById('break-regular');
                let breakbtnoptions = breakbtn.options;
                if (data.length == 0) {
                    timeinbtn.disabled = false;
                    timeoutbtn.disabled = true;
                    breakbtn.disabled = true;
                }
                else {
                    // console.log(data[0].breakInAm);
                    // console.log(data[0].lunchIn);
                    // console.log(data[0].breakInPm);
                    if (data[0].breakInAm != null) {
                        for (let i = 0; i < breakbtnoptions.length; i++) {
                            if (breakbtnoptions[i].value === "1") {
                                breakbtnoptions[i].disabled = true;
                                
                            }
                        }
                    }
                    if (data[0].lunchIn != null) {
                        for (let i = 0; i < breakbtnoptions.length; i++) {
                            if (breakbtnoptions[i].value === "2") {
                                breakbtnoptions[i].disabled = true;
                                
                            }
                        }
                    }

                    if (data[0].breakInPm != null) {
                        for (let i = 0; i < breakbtnoptions.length; i++) {
                            if (breakbtnoptions[i].value === "3") {
                                breakbtnoptions[i].disabled = true;
                                
                            }
                        }
                    }
                    if (data[0].breakInAm != null && data[0].breakOutAm == null || data[0].breakInPm != null && data[0].breakOutPm == null || data[0].lunchIn != null && data[0].lunchOut == null) {

                        timeinbtn.disabled = false;
                        timeoutbtn.disabled = true;
                        breakbtn.disabled = true;
                    }
                    else{
                        timeinbtn.disabled = true;
                        timeoutbtn.disabled = false;
                        breakbtn.disabled = false;
                    }
                }
            });
        }
        function TimelogsFileDrag(){
            const dropZone = document.getElementById("tl-drop-zone");
            const fileInput = document.getElementById("tl-upload-excel");

            // Open file picker on click
            dropZone.addEventListener("click", () => fileInput.click());

            // Highlight drop area on drag over
            dropZone.addEventListener("dragover", (e) => {
              e.preventDefault();
              dropZone.classList.add("dragover");
            });

            dropZone.addEventListener("dragleave", () => {
              dropZone.classList.remove("dragover");
            });

            dropZone.addEventListener("drop", (e) => {
              e.preventDefault();
              dropZone.classList.remove("dragover");

              const files = e.dataTransfer.files;
              handleFiles(files);
              if (files.length > 0) {
                    console.log('Dropped file:', files[0]);

                    // Optional: simulate setting the input's file list
                    const dataTransfer = new DataTransfer(); // or ClipboardEvent().clipboardData
                    for (let i = 0; i < files.length; i++) {
                        dataTransfer.items.add(files[i]);
                    }
                    fileInput.files = dataTransfer.files;

                    // Now fileInput.files has the dropped file(s)
                    // You can trigger a function to handle upload or preview
                }
            });

            // Handle files from input
            fileInput.addEventListener("change", () => {
              handleFiles(fileInput.files);
            });
        }
        function handleFiles(files) {
            // You can upload the files here or just log them
            console.log("Files uploaded:", files[0].name);
            tlfilename = files[0].name;
            // Example: Upload to server or display preview
            document.getElementById("tl-drag-file-label").textContent = tlfilename;
            const text = document.getElementById("tl-drag-file-label");
            const colors = ["green"];
            let colorIndex = 0;
            let visible = true;
            text.style.fontWeight = "800";
            setInterval(() => {
              // Toggle visibility
              text.style.visibility = visible ? "hidden" : "visible";
              visible = !visible;

              // Change color on each blink
              if (visible) {
                text.style.color = colors[colorIndex];
                colorIndex = (colorIndex + 1) % colors.length;
              }
            }, 500); // Blink interval: 500ms

        }

        $("#import-timelogs").click(function () {
            document.getElementById('tl-filing-container').style.display = "block";
        }); 
        $("#tl-close-filing-container").click(function () {
            document.getElementById('tl-filing-container').style.display = "none";
        });
        function downloadTLTemplate() {
            // alert('Template Downloaded')
            location.replace('../TimeLogs/DownloadHeader');
        }
        document.addEventListener("DOMContentLoaded", function () {

            const tsmonthSelect = document.getElementById("ts-monthSelect");
            const tscurrentYear = new Date().getFullYear();
            for (let tsmonth = 0; tsmonth < 12; tsmonth++) {
               const tsmonthName = new Date(tscurrentYear, tsmonth).toLocaleString('default', { month: 'long' });
               const tsoption = document.createElement("option");
               tsoption.value = `${tscurrentYear}-${String(tsmonth + 1).padStart(2, '0')}`;
               tsoption.text = `${tsmonthName} ${tscurrentYear}`;
               tsmonthSelect.appendChild(tsoption);
            }
            tsmonthSelect.value = `${tscurrentYear}-${String(new Date().getMonth() + 1).padStart(2, '0')}`;
            setCutOffDatests();
        });

        function setCutOffDatests() {
            const tsselectedMonth = document.getElementById("ts-monthSelect").value;
            const tsCuttOff = document.getElementById("tsCuttOff").value;
            const [tsyear, tsmonth] = tsselectedMonth.split('-').map(Number);
            if (tsCuttOff == 0) {
               tsfromDate = new Date(tsyear, tsmonth - 2, 26);
               tstoDate = new Date(tsyear, tsmonth - 1, 10);
            } else if (tsCuttOff == 1) {
               tsfromDate = new Date(tsyear, tsmonth - 1, 11);
               tstoDate = new Date(tsyear, tsmonth - 1, 25);
            }
            const formattsFromDate = (tsfromDate) => {
               let year = tsfromDate.getFullYear();
               let month = tsfromDate.getMonth() + 1; // Month is zero-indexed, so add 1
               let day = tsfromDate.getDate();
               // Ensure month and day are always two digits
               if (month < 10) month = '0' + month;
               if (day < 10) day = '0' + day;
               return `${year}-${month}-${day}`;
            };
            const formattsToDate = (tstoDate) => {
               let year = tstoDate.getFullYear();
               let month = tstoDate.getMonth() + 1; // Month is zero-indexed, so add 1
               let day = tstoDate.getDate();
               // Ensure month and day are always two digits
               if (month < 10) month = '0' + month;
               if (day < 10) day = '0' + day;
               return `${year}-${month}-${day}`;
            };
            document.getElementById('datefrom').value = formattsFromDate(tsfromDate);
            document.getElementById('dateto').value = formattsToDate(tstoDate);
        }
        $('#tsCuttOff').on('change', function () {
           setCutOffDatests();
           initializeDataTable();
        });
        $('#ts-monthSelect').on('change', function () {
           setCutOffDatests();
           initializeDataTable();
        });
    </script>
}
