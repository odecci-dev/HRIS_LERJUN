@{
    ViewData["Title"] = "Approvals";
    Layout = "~/Views/Shared/_Layout.cshtml";
    string message = "";
    if (ViewData["Message"] != null)
    {
        message = ViewData["Message"].ToString();
    }
}
@using Microsoft.AspNetCore.Http;
@inject IHttpContextAccessor Accessor;

<style>
    /* Style for tab container */
    .tab {
        overflow: hidden;
        border-bottom: 2px solid #ccc;
    }

        /* Tab buttons */
        .tab button {
            background-color: inherit;
            border: none;
            outline: none;
            cursor: pointer;
            padding: 10px 20px;
            transition: 0.3s;
            font-size: 16px;
        }

            /* Active tab button */
            .tab button.active {
                border-bottom: 3px solid white;
            }

    /* Tab content */
    .tab-content {
        display: none;
        padding: 15px;
        border: 1px solid #ddd;
    }

        /* Show active content */
        .tab-content.active {
            display: block;
        }

    .tablinks {
        background: #f8f9fa;
        border: none;
        padding: 12px 18px;
        font-size: 16px;
        border-radius: 8px 8px 0 0;
        cursor: pointer;
        transition: all 0.3sease-in-out;
        outline: none;
        font-weight: 500;
        border-top-left-radius: 30px;
        color: #333;
    }

        .tablinks:hover {
            background: var(--dark);
            color: white;
        }

        .tablinks.active {
            border-top-left-radius: 30px;
            background: var(--dark);
            color: white;
            font-weight: bold;
            box-shadow: 0px -3px 8px rgba(0, 123, 255, 0.3);
        }
</style>
@await Html.PartialAsync("~/Views/TimeLogs/_loader.cshtml");
<div id="dashboard-main-container">
    <div class="title-main-container">
        <div class="content-container">
            <h4 style="font-size: 26px;" class="text-left">   <i class="fas fa-check-to-slot" style="margin: 10px;"></i> @ViewData["Title"].ToString()</h4>
        </div>
    </div>
    <div class="top-main-container ">
    </div>
    <div class="main-container">
        <div class="content-filter">
            <div class="tab">
                <button class="tablinks active" onclick="openTab(event, 'Tab1')">Timelogs</button>
                <button class="tablinks" onclick="openTab(event, 'Tab2')">Leave</button>
                <button class="tablinks" onclick="openTab(event, 'Tab3')">Overtime</button>
            </div>
            <div id="Tab1" class="tab-content active">
                @* <h3>Tab 1 Content</h3> *@

                @await Html.PartialAsync("~/Views/TimeLogs/_PendingTimelogs.cshtml")
            </div>

            <div id="Tab2" class="tab-content">
                @* <h3>Tab 2 Content</h3> *@
                @await Html.PartialAsync("~/Views/Leave/_PendingLeaveRequest.cshtml")
            </div>

            <div id="Tab3" class="tab-content">
                @* <h3>Tab 3 Content</h3> *@
                @await Html.PartialAsync("~/Views/OverTime/_PendingOverTime.cshtml")
            </div>

        </div>
        <div class="content-filter-tbl">
            <table id="filing-table" class="table table-bordered table-hover w-100">
                <thead>
                </thead>
                <tbody>
                </tbody>

            </table>
            <div id="table-footer">
            </div>

        </div>
    </div>
</div>



@* <div class="approved-modal">
    <div class="declineModal">
        <div class="header">
            <h3>Decline Reason</h3>
            <button class="closemodal" id="closemodal" aria-label="Close" onclick="myFunction()"></button>
        </div>
        <form id="add-time-out-form">
            <div class="input-holder">
                <div class="input-holder" id="timeoutreasonholder">
                    <span class="label">Specify Reason:</span>
                    <div class="input-container">
                        <textarea id="declineReason" rows="10"></textarea>
                    </div>
                </div>
                <div class="input-holder">
                    <div class="input-container">
                        <input type="submit" value="Submit" id="" />
                    </div>
                </div>
            </div>

        </form>
    </div>
</div> *@


@section Scripts {

    <script>
        const selectedRequest = []
        let otStatusIdentifier = 0;
        let otStatusFilter = 0;
        let plrStatusFilter = 0;

        var userType = "@Accessor.HttpContext.Session.GetString("UserTypeName")";
        var userId = "@Accessor.HttpContext.Session.GetString("UserID")";
        $(document).ready(function () {
            // Timelogs Start
            fetchtimlogsuserpendingselect();
            initializeTimlogsDataTable();
            timelogsTableMOD();
            // Timelogs End
            // Overtime Start
            // fetchOTuserpendingselect();
            initializeOTDataTable();
            OTTableMOD();
            // Overtime End
            // Leave Start
            initializeLeaveDataTable();
            // Leave End
        });

        document.addEventListener("DOMContentLoaded", function () {
            const potmonthSelect = document.getElementById("pot-monthSelect");
            const potcurrentYear = new Date().getFullYear();
            for (let potmonth = 0; potmonth < 12; potmonth++) {
                const potmonthName = new Date(potcurrentYear, potmonth).toLocaleString('default', { month: 'long' });
                const potoption = document.createElement("option");
                potoption.value = `${potcurrentYear}-${String(potmonth + 1).padStart(2, '0')}`;
                potoption.text = `${potmonthName} ${potcurrentYear}`;
                potmonthSelect.appendChild(potoption);
            }
            // Set default to current month
            potmonthSelect.value = `${potcurrentYear}-${String(new Date().getMonth() + 1).padStart(2, '0')}`;
            setCutOffDatesPOT();
        });
        function setCutOffDatesPOT() {
            const potselectedMonth = document.getElementById("pot-monthSelect").value;
            const potCuttOff = document.getElementById("potCuttOff").value;
            const [year, month] = potselectedMonth.split('-').map(Number);
            let fromDate, toDate;
            //console.log(month);
            if (potCuttOff == 0) {
                fromDate = new Date(year, month - 2, 26);
                toDate = new Date(year, month - 1, 10);
            } else if (potCuttOff == 1) {
                fromDate = new Date(year, month - 1, 11);
                toDate = new Date(year, month - 1, 25);
            }

            // Format as YYYY-MM-DD
            const formatFromDate = (fromDate) => {
                let year = fromDate.getFullYear();
                let month = fromDate.getMonth() + 1; // Month is zero-indexed, so add 1
                let day = fromDate.getDate();
                // Ensure month and day are always two digits
                if (month < 10) month = '0' + month;
                if (day < 10) day = '0' + day;
                return `${year}-${month}-${day}`;
            };
            const formatToDate = (toDate) => {
                let year = toDate.getFullYear();
                let month = toDate.getMonth() + 1; // Month is zero-indexed, so add 1
                let day = toDate.getDate();
                // Ensure month and day are always two digits
                if (month < 10) month = '0' + month;
                if (day < 10) day = '0' + day;
                return `${year}-${month}-${day}`;
            };
            document.getElementById('pot-datefrom').value = formatFromDate(fromDate);
            document.getElementById('pot-dateto').value = formatToDate(toDate);

        }
        $('#potCuttOff').on('change', function () {
            setCutOffDatesPOT();
            initializeOTDataTable();
        });
        $('#pot-monthSelect').on('change', function () {
            setCutOffDatesPOT();
            initializeOTDataTable();
        });
        document.addEventListener("DOMContentLoaded", function () {
            const plrmonthSelect = document.getElementById("plr-monthSelect");
            const plrcurrentYear = new Date().getFullYear();

            for (let plrmonth = 0; plrmonth < 12; plrmonth++) {
                const plrmonthName = new Date(plrcurrentYear, plrmonth).toLocaleString('default', { month: 'long' });
                const plroption = document.createElement("option");
                plroption.value = `${plrcurrentYear}-${String(plrmonth + 1).padStart(2, '0')}`;
                plroption.text = `${plrmonthName} ${plrcurrentYear}`;
                plrmonthSelect.appendChild(plroption);
            }
            plrmonthSelect.value = `${plrcurrentYear}-${String(new Date().getMonth() + 1).padStart(2, '0')}`;
            setCutOffDatesPLR();
            //const lrmonthSelect = document.getElementById("lr-monthSelect");
            //const lrcurrentYear = new Date().getFullYear();
            //for (let lrmonth = 0; lrmonth < 12; lrmonth++) {
            //    const lrmonthName = new Date(lrcurrentYear, lrmonth).toLocaleString('default', { month: 'long' });
            //    const lroption = document.createElement("option");
            //    lroption.value = `${lrcurrentYear}-${String(lrmonth + 1).padStart(2, '0')}`;
            //    lroption.text = `${lrmonthName} ${lrcurrentYear}`;
            //    lrmonthSelect.appendChild(lroption);
            //}
            //// Set default to current month
            //potmonthSelect.value = `${potcurrentYear}-${String(new Date().getMonth() + 1).padStart(2, '0')}`;
            //plrmonthSelect.value = `${plrcurrentYear}-${String(new Date().getMonth() + 1).padStart(2, '0')}`;
            //setCutOffDatesPLR();
        });
        function setCutOffDatesPLR() {
            //const lrselectedMonth = document.getElementById("lr-monthSelect").value;
            //const lrCuttOff = document.getElementById("lrCuttOff").value;;
            //const [year, month] = lrselectedMonth.split('-').map(Number);
            const plrselectedMonth = document.getElementById("plr-monthSelect").value;
            const plrCuttOff = document.getElementById("plrCuttOff").value
            const [plryear, plrmonth] = plrselectedMonth.split('-').map(Number);

            //let fromDate, toDate;
            //console.log(month);
            //if (lrCuttOff == 0) {
            //    fromDate = new Date(year, month - 2, 26);
            //    toDate = new Date(year, month - 1, 10);
            //} else if (lrCuttOff == 1) {
            //    fromDate = new Date(year, month - 1, 11);
            //    toDate = new Date(year, month - 1, 25);
            //}
            if (plrCuttOff == 0) {
                plrfromDate = new Date(plryear, plrmonth - 2, 26);
                plrtoDate = new Date(plryear, plrmonth - 1, 10);
            } else if (plrCuttOff == 1) {
                plrfromDate = new Date(plryear, plrmonth - 1, 11);
                plrtoDate = new Date(plryear, plrmonth - 1, 25);
            }
            // Adjust to weekday if falls on weekend
            //fromDate = stladjustToWeekday(fromDate);
            //toDate = stladjustToWeekday(toDate);
            // Adjust to weekday if falls on weekend
            plrfromDate = stladjustToWeekday(plrfromDate);
            plrtoDate = stladjustToWeekday(plrtoDate);

            //// Format as YYYY-MM-DD
            //const formatFromDate = (fromDate) => {
            //    let year = fromDate.getFullYear();
            //    let month = fromDate.getMonth() + 1; // Month is zero-indexed, so add 1
            //    let day = fromDate.getDate();
            //    // Ensure month and day are always two digits
            //    if (month < 10) month = '0' + month;
            //    if (day < 10) day = '0' + day;
            //    return `${year}-${month}-${day}`;
            //};
            //const formatToDate = (toDate) => {
            //    let year = toDate.getFullYear();
            //    let month = toDate.getMonth() + 1; // Month is zero-indexed, so add 1
            //    let day = toDate.getDate();
            //    // Ensure month and day are always two digits
            //    if (month < 10) month = '0' + month;
            //    if (day < 10) day = '0' + day;
            //    return `${year}-${month}-${day}`;
            //};
            const formatPLRFromDate = (plrfromDate) => {
                let year = plrfromDate.getFullYear();
                let month = plrfromDate.getMonth() + 1; // Month is zero-indexed, so add 1
                let day = plrfromDate.getDate();
                // Ensure month and day are always two digits
                if (month < 10) month = '0' + month;
                if (day < 10) day = '0' + day;
                return `${year}-${month}-${day}`;
            };
            const formatPLRToDate = (plrtoDate) => {
                let year = plrtoDate.getFullYear();
                let month = plrtoDate.getMonth() + 1; // Month is zero-indexed, so add 1
                let day = plrtoDate.getDate();
                // Ensure month and day are always two digits
                if (month < 10) month = '0' + month;
                if (day < 10) day = '0' + day;
                return `${year}-${month}-${day}`;
            };
            //document.getElementById('lr-datefrom').value = formatFromDate(fromDate);
            //document.getElementById('lr-dateto').value = formatToDate(toDate);
            document.getElementById('plr-datefrom').value = formatPLRFromDate(plrfromDate);
            document.getElementById('plr-dateto').value = formatPLRToDate(plrtoDate);
        }

        $('#plrCuttOff').on('change', function () {
            setCutOffDatesPLR();
            initializeLeaveDataTable();
        });
        $('#plr-monthSelect').on('change', function () {
            setCutOffDatesPLR();
            initializeLeaveDataTable();
        });
        function openTab(evt, tabName) {
            var i, tabcontent, tablinks;

            // Hide all tab contents
            tabcontent = document.getElementsByClassName("tab-content");
            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].style.display = "none";
            }
            // Remove active class from all tab buttons
            tablinks = document.getElementsByClassName("tablinks");
            for (i = 0; i < tablinks.length; i++) {
                tablinks[i].classList.remove("active");
            }

            // Show the current tab and add active class
            document.getElementById(tabName).style.display = "block";
            evt.currentTarget.classList.add("active");
        }
        // document.getElementById("refresh-leave").onclick = function () {
        //    initializeLeaveDataTable();
        // }
        // document.getElementById("decline-leave").onclick = function () {
        //     var checkboxes = document.querySelectorAll('.row-checkbox');
        //     var checkedCheckboxes = Array.from(checkboxes).filter(checkbox => checkbox.checked);
        //     if(checkedCheckboxes.length == 0){
        //         alert('Select Leave Request First');
        //     }
        //     else{
        //         loadModal('/Leave/LeaveApproval', '#defaultmodal', '<i class="fa-solid fa-business-time"></i> Decline Leave ', 'l', false);
        //         selectedRequest.length = 0;
        //         for (var checkbox of checkedCheckboxes) {
        //             var value = checkbox.value;
        //             selectedRequest.push(value);
        //         }
        //         console.log(selectedRequest);
        //     }
        // }
        const lrapprovallist = []
        // document.getElementById("approve-leave").onclick = function () {

        //     var checkboxes = document.querySelectorAll('.row-checkbox');
        //     var checkedCheckboxes = Array.from(checkboxes).filter(checkbox => checkbox.checked);
        //     if(checkedCheckboxes.length == 0){
        //         alert('Select Leave Request First');
        //     }
        //     else{

        //         selectedRequest.length = 0;
        //         for (var checkbox of checkedCheckboxes) {
        //             var value = checkbox.value;
        //             selectedRequest.push(value);
        //         }
        //         console.log(selectedRequest);
        //         LRapprovemodal();
        //         $("#alertmodal").modal('show');
        //     }
        // }

        function rejectLeave(){
           var checkboxes = document.querySelectorAll('.row-checkbox');
            var checkedCheckboxes = Array.from(checkboxes).filter(checkbox => checkbox.checked);
            if(checkedCheckboxes.length == 0){
                alert('Select Leave Request First');
            }
            else{
                loadModal('/Leave/LeaveApproval', '#defaultmodal', '<i class="fa-solid fa-business-time"></i> Decline Leave ', 'l', false);
                selectedRequest.length = 0;
                for (var checkbox of checkedCheckboxes) {
                    var value = checkbox.value;
                    selectedRequest.push(value);
                }
                console.log(selectedRequest);
            }
        }
        function approveLeave(){
            var checkboxes = document.querySelectorAll('.row-checkbox');
            var checkedCheckboxes = Array.from(checkboxes).filter(checkbox => checkbox.checked);
            if(checkedCheckboxes.length == 0){
                alert('Select Leave Request First');
            }
            else{

                selectedRequest.length = 0;
                for (var checkbox of checkedCheckboxes) {
                    var value = checkbox.value;
                    selectedRequest.push(value);
                }
                console.log(selectedRequest);
                LRapprovemodal();
                $("#alertmodal").modal('show');
            }
        }
        function LRapprovemodal() {
            var element = document.querySelectorAll(".modal-header");
            var content = document.querySelectorAll(".modal-content");
            var modal_span = document.querySelectorAll(".modal-header span");
            var delete_ = '<input type="submit" value="YES" id="btn-delete_item" class="btn-pay"  onclick="approvedLR()"/>';
            var cancelButton = '<input type="submit" value="NO" id="btn-cancel" class="btn-NO" data-dismiss="modal"/>';
            $('.input-container-button').empty();
            $('.img-header').empty();

            content.forEach(content => {
                content.style.setProperty("border-radius", "15px 15px 15px 15px", "important");
                content.style.setProperty("border-bottom", "7px #17a2b8 solid", "important");

            });
            modal_span.forEach(modal_span => {
                modal_span.style.setProperty("text-align", "center", "important");
                modal_span.style.setProperty("width", "100%", "important");
            });
            element.forEach(element => {
                element.style.setProperty("color", "white", "important");
                element.style.setProperty("background-color", "#17a2b8", "important");
                element.style.setProperty("border-radius", "15px 15px 0 0", "important");
                element.style.setProperty("text-align", "center", "important");
            });
            document.getElementById('message').textContent = 'Are you sure you want to aprroved this item?';
            document.getElementById('validation').textContent = 'Confirmation';
            $('.input-container-button').append(cancelButton);
            $('.input-container-button').append(delete_);
            $('.img-header').append('<img id="modalImage" src="/img/OPTION.webp" alt="Modal Image" />');
        }
        function approvedLR() {

           // console.log(selectedRequest.length);

           const lrapproval = []
           for(var i = 0; i < selectedRequest.length; i++){
               lrapproval.push({ id: selectedRequest[i], reason: 'Approved without reason'});
           }
           // lrapproval.push({ id: el.dataset.id, reason: el.value });
            var data = {};
            // data.lrapproval = selectedLeaveRequest;
            data.lrapproval = lrapproval;
            data.status = 1;
            console.log(data)

            $.ajax({
                url: '/Leave/MultiApproval',
                data: data,
                type: "POST",
                dataType: "json"
            }).done(function (data) {
                var status = data.status;
                console.log(status);
                if (status === 'Entity already exists') {
                    notifyMsg('Warning!', 'Leave request already exists', 'yellow', 'fas fa-check');
                }
                else {
                    notifyMsg('Success!', 'Successfully Approved', 'green', 'fas fa-check');
                    $("#alertmodal").modal('hide');
                    initializeLeaveDataTable();
                }
            });
        }
        // document.getElementById("checkAllLeave").onclick = function () {
        //    alert('checkAll');
        // }
        $('#pending-leave-table').on('click', '.checkAllLeave', function () {
           var checkAllPending = document.getElementById("checkAllLeave");
           if(checkAllPending.checked == true){
               var checkboxes = document.querySelectorAll('.row-checkbox');
                for (var checkbox of checkboxes) {
                    checkbox.checked = this.checked;
                }
           }
           else{
               var checkboxes = document.querySelectorAll('.row-checkbox');
                for (var checkbox of checkboxes) {
                    checkbox.checked = false;
                }
           }
        });
        $('#pending-overtime-table').on('click', '.ot-row-checkbox', function () {
            var refreshot = document.getElementById("refresh-ot");
            var declineot = document.getElementById("decline-ot");
            var approveot = document.getElementById("approve-ot");
            var checkboxes = document.querySelectorAll('.ot-row-checkbox');
            checkboxes.forEach(checkbox => {
                this.addEventListener('change', () => {
                    const checkedCount = Array.from(checkboxes).filter(cb => cb.checked).length;

                    if (checkedCount > 0) {
                        refreshot.style.display = "none";
                        declineot.style.display = "flex";
                        approveot.style.display = "flex";
                    } else {
                        refreshot.style.display = "flex";
                        declineot.style.display = "none";
                        approveot.style.display = "none";
                    }
                });
            });
        });
        $('#pending-overtime-table').on('click', '.checkAllOT', function () {

           var checkAllPending = document.getElementById("checkAllOT");
           var refreshot = document.getElementById("refresh-ot");
           var declineot = document.getElementById("decline-ot");
           var approveot = document.getElementById("approve-ot");
           if(checkAllPending.checked == true){
               var checkboxes = document.querySelectorAll('.ot-row-checkbox');
                for (var checkbox of checkboxes) {
                    checkbox.checked = this.checked;
                    refreshot.style.display = "none";
                    declineot.style.display = "flex";
                    approveot.style.display = "flex";
                }
           }
           else{
               var checkboxes = document.querySelectorAll('.ot-row-checkbox');
                for (var checkbox of checkboxes) {
                    checkbox.checked = false;
                    refreshot.style.display = "flex";
                    declineot.style.display = "none";
                    approveot.style.display = "none";
                }
           }
        });

        $('#pending-timelogs-table').on('click', '.checkAllTL', function () {

           var checkAllPending = document.getElementById("checkAllTL");
           if(checkAllPending.checked == true){
               var checkboxes = document.querySelectorAll('.tl-row-checkbox');
                for (var checkbox of checkboxes) {
                    checkbox.checked = this.checked;
                }
           }

           else{
               var checkboxes = document.querySelectorAll('.tl-row-checkbox');
                for (var checkbox of checkboxes) {
                    checkbox.checked = false;
                }
           }
        });

        // document.getElementById("decline-ot").onclick = function () {
        //     otStatusIdentifier = 0;
        //     console.log(otStatusIdentifier);
        //     var checkboxes = document.querySelectorAll('.ot-row-checkbox');
        //     var checkedCheckboxes = Array.from(checkboxes).filter(checkbox => checkbox.checked);
        //     if(checkedCheckboxes.length == 0){
        //         alert('Select Overtime Request First');
        //     }
        //     else{
        //         loadModal('/Overtime/OTApproval', '#defaultmodal', '<i class="fa-solid fa-business-time"></i> Decline Overtime ', 'l', false);
        //         selectedRequest.length = 0;
        //         for (var checkbox of checkedCheckboxes) {
        //             var value = checkbox.value;
        //             selectedRequest.push(value);
        //         }
        //         console.log(selectedRequest);
        //     }
        // }
        function DeclineOvertime(){
            otStatusIdentifier = 0;
            console.log(otStatusIdentifier);
            var checkboxes = document.querySelectorAll('.ot-row-checkbox');
            var checkedCheckboxes = Array.from(checkboxes).filter(checkbox => checkbox.checked);
            if(checkedCheckboxes.length == 0){
                alert('Select Overtime Request First');
            }
            else{
                loadModal('/Overtime/OTApproval', '#defaultmodal', '<i class="fa-solid fa-business-time"></i> Decline Overtime ', 'l', false);
                selectedRequest.length = 0;
                for (var checkbox of checkedCheckboxes) {
                    var value = checkbox.value;
                    selectedRequest.push(value);
                }

                console.log(selectedRequest);
            }
        }
        // document.getElementById("approve-ot").onclick = function () {
        //     otStatusIdentifier = 1;
        //     console.log(otStatusIdentifier);
        //     var checkboxes = document.querySelectorAll('.ot-row-checkbox');
        //     var checkedCheckboxes = Array.from(checkboxes).filter(checkbox => checkbox.checked);
        //     if(checkedCheckboxes.length == 0){
        //         alert('Select Overtime Request First');
        //     }
        //     else{
        //         loadModal('/Overtime/OTApproval', '#defaultmodal', '<i class="fa-solid fa-business-time"></i> Approve Overtime ', 'l', false);
        //         selectedRequest.length = 0;
        //         for (var checkbox of checkedCheckboxes) {
        //             var value = checkbox.value;
        //             selectedRequest.push(value);
        //         }
        //         console.log(selectedRequest);
        //     }
        // }
        function ApproveOvertime(){
            otStatusIdentifier = 1;
            console.log(otStatusIdentifier);
            var checkboxes = document.querySelectorAll('.ot-row-checkbox');
            var checkedCheckboxes = Array.from(checkboxes).filter(checkbox => checkbox.checked);
            if(checkedCheckboxes.length == 0){
                alert('Select Overtime Request First');
            }
            else{
                loadModal('/Overtime/OTApproval', '#defaultmodal', '<i class="fa-solid fa-business-time"></i> Approve Overtime ', 'l', false);
                selectedRequest.length = 0;
                for (var checkbox of checkedCheckboxes) {
                    var value = checkbox.value;
                    selectedRequest.push(value);
                }
                console.log(selectedRequest);
            }
        }


    </script>


}